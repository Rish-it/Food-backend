"""Initial migration

Revision ID: c7e642db3f76
Revises: 
Create Date: 2025-05-29 13:30:03.629346

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# revision identifiers, used by Alembic.
revision: str = 'c7e642db3f76'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create schemas first
    op.execute('CREATE SCHEMA IF NOT EXISTS delivery')
    op.execute('CREATE SCHEMA IF NOT EXISTS orders')
    op.execute('CREATE SCHEMA IF NOT EXISTS restaurants')
    op.execute('CREATE SCHEMA IF NOT EXISTS users')
    
    op.create_table('delivery_agents',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('current_location', sa.JSON(), nullable=True),
    sa.Column('vehicle_type', sa.String(length=50), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone'),
    schema='delivery'
    )
    op.create_index(op.f('ix_delivery_delivery_agents_is_available'), 'delivery_agents', ['is_available'], unique=False, schema='delivery')
    op.create_table('orders',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('restaurant_id', sa.UUID(), nullable=False),
    sa.Column('delivery_agent_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('total_amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('delivery_address', sa.JSON(), nullable=False),
    sa.Column('special_instructions', sa.String(), nullable=True),
    sa.Column('placed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('accepted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='orders'
    )
    op.create_index(op.f('ix_orders_orders_delivery_agent_id'), 'orders', ['delivery_agent_id'], unique=False, schema='orders')
    op.create_index(op.f('ix_orders_orders_restaurant_id'), 'orders', ['restaurant_id'], unique=False, schema='orders')
    op.create_index(op.f('ix_orders_orders_status'), 'orders', ['status'], unique=False, schema='orders')
    op.create_index(op.f('ix_orders_orders_user_id'), 'orders', ['user_id'], unique=False, schema='orders')
    op.create_table('restaurants',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('address', sa.JSON(), nullable=False),
    sa.Column('cuisine_type', sa.String(length=100), nullable=True),
    sa.Column('is_online', sa.Boolean(), nullable=True),
    sa.Column('operation_hours', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    schema='restaurants'
    )
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('address', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='users'
    )
    op.create_index(op.f('ix_users_users_email'), 'users', ['email'], unique=True, schema='users')
    op.create_index(op.f('ix_users_users_phone'), 'users', ['phone'], unique=True, schema='users')
    op.create_table('order_items',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('menu_item_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('total_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.orders.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='orders'
    )
    op.create_table('ratings',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('restaurant_rating', sa.Integer(), nullable=True),
    sa.Column('delivery_rating', sa.Integer(), nullable=True),
    sa.Column('restaurant_review', sa.String(), nullable=True),
    sa.Column('delivery_review', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.orders.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('order_id'),
    schema='orders'
    )
    op.create_table('menu_items',
    sa.Column('restaurant_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('image_url', sa.String(length=500), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['restaurant_id'], ['restaurants.restaurants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='restaurants'
    )
    # ### end Alembic commands ###
def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('menu_items', schema='restaurants')
    op.drop_table('ratings', schema='orders')
    op.drop_table('order_items', schema='orders')
    op.drop_index(op.f('ix_users_users_phone'), table_name='users', schema='users')
    op.drop_index(op.f('ix_users_users_email'), table_name='users', schema='users')
    op.drop_table('users', schema='users')
    op.drop_table('restaurants', schema='restaurants')
    op.drop_index(op.f('ix_orders_orders_user_id'), table_name='orders', schema='orders')
    op.drop_index(op.f('ix_orders_orders_status'), table_name='orders', schema='orders')
    op.drop_index(op.f('ix_orders_orders_restaurant_id'), table_name='orders', schema='orders')
    op.drop_index(op.f('ix_orders_orders_delivery_agent_id'), table_name='orders', schema='orders')
    op.drop_table('orders', schema='orders')
    op.drop_index(op.f('ix_delivery_delivery_agents_is_available'), table_name='delivery_agents', schema='delivery')
    op.drop_table('delivery_agents', schema='delivery')
    
    # Drop schemas after all tables are dropped
    op.execute('DROP SCHEMA IF EXISTS delivery CASCADE')
    op.execute('DROP SCHEMA IF EXISTS orders CASCADE')
    op.execute('DROP SCHEMA IF EXISTS restaurants CASCADE')
    op.execute('DROP SCHEMA IF EXISTS users CASCADE')
    # ### end Alembic commands ###
