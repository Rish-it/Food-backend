events {
    worker_connections 1024;
}

http {
    upstream user_service {
        server user_service:8001;
    }

    upstream restaurant_service {
        server restaurant_service:8002;
    }

    upstream delivery_service {
        server delivery_service:8003;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    server {
        listen 80;
        server_name localhost;

        # Apply rate limiting
        limit_req zone=api burst=20 nodelay;

        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

        # Handle preflight requests
        location / {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # User Service routes
        location /api/v1/user/ {
            rewrite ^/api/v1/user/(.*)$ /$1 break;
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Restaurant Service routes
        location /api/v1/restaurant/ {
            rewrite ^/api/v1/restaurant/(.*)$ /$1 break;
            proxy_pass http://restaurant_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Delivery Service routes
        location /api/v1/delivery/ {
            rewrite ^/api/v1/delivery/(.*)$ /$1 break;
            proxy_pass http://delivery_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health checks for all services
        location /health {
            access_log off;
            return 200 "API Gateway is healthy\n";
            add_header Content-Type text/plain;
        }

        location /health/user {
            proxy_pass http://user_service/health;
        }

        location /health/restaurant {
            proxy_pass http://restaurant_service/health;
        }

        location /health/delivery {
            proxy_pass http://delivery_service/health;
        }

        # API Documentation
        location /docs/user {
            proxy_pass http://user_service/docs;
        }

        location /docs/restaurant {
            proxy_pass http://restaurant_service/docs;
        }

        location /docs/delivery {
            proxy_pass http://delivery_service/docs;
        }

        # Default route
        location / {
            return 200 '{"message":"Food Delivery API Gateway","version":"1.0.0","services":{"user":"/api/v1/user/","restaurant":"/api/v1/restaurant/","delivery":"/api/v1/delivery/"},"docs":{"user":"/docs/user","restaurant":"/docs/restaurant","delivery":"/docs/delivery"}}';
            add_header Content-Type application/json;
        }
    }
} 